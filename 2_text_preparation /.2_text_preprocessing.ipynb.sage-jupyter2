{"backend_state":"running","connection_file":"/projects/ae15c660-30de-474e-abca-5963358c9eb9/.local/share/jupyter/runtime/kernel-438bb2f6-8f3c-45ab-a0e8-7bcdc78ddd08.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1627535722485,"exec_count":15,"id":"7c355e","input":"# import library\nimport re","kernel":"python3-ubuntu","pos":4,"start":1627535722480,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535722878,"exec_count":16,"id":"ed847f","input":"# Here is the dictionary that we will use for expanding the contractions:\n    \ncontraction_mapping = {\"ain't\": \"is not\", \n                       \"aren't\": \"are not\",\n                       \"can't\": \"cannot\", \n                       \"'cause\": \"because\", \n                       \"could've\": \"could have\", \"couldn't\": \"could not\",\n                           \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\",\n                           \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",\n                           \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\",\n                           \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n                           \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\",\n                           \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\",\n                           \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\",\n                           \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\",\n                           \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n                           \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\",\n                           \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\",\n                           \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\",\n                           \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\",\n                           \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\",\n                           \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",\n                           \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\",\n                           \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n                           \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\",\n                           \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\",\n                           \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\n                           \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\",\n                           \"you're\": \"you are\", \"you've\": \"you have\"}","kernel":"python3-ubuntu","pos":5,"start":1627535722874,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535723057,"exec_count":17,"id":"d155c5","input":"text = \"\"\" I'm abcd. MY FAVORITE SUBJECT is STEM (Science Tech Eng Math). Please come to vist the website https://www.ai-camp.org. Some HTML ... <img src=\"subdirectory/MyImage.png\" width=60 height=60 />. I make $234234 every year!!!!\"\"\"\nprint(text)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":" I'm abcd. MY FAVORITE SUBJECT is STEM (Science Tech Eng Math). Please come to vist the website https://www.ai-camp.org. Some HTML ... <img src=\"subdirectory/MyImage.png\" width=60 height=60 />. I make $234234 every year!!!!\n"}},"pos":6,"start":1627535723051,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535723238,"exec_count":18,"id":"47c580","input":"# 1.Convert everything to lowercase\ntext = text.lower()\nprint(text)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":" i'm abcd. my favorite subject is stem (science tech eng math). please come to vist the website https://www.ai-camp.org. some html ... <img src=\"subdirectory/myimage.png\" width=60 height=60 />. i make $234234 every year!!!!\n"}},"pos":7,"start":1627535723232,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535723402,"exec_count":19,"id":"f56b3a","input":"# 2.Remove HTML tags\nfrom bs4 import BeautifulSoup\ntext = BeautifulSoup(text, \"lxml\").text\nprint(text)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"i'm abcd. my favorite subject is stem (science tech eng math). please come to vist the website https://www.ai-camp.org. some html ... . i make $234234 every year!!!!\n"}},"pos":8,"start":1627535723397,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535723546,"exec_count":20,"id":"c0a8fd","input":"# 3.get rid of urls\ntext = re.sub('https?://\\S+|www\\.\\S+', '', text)\nprint(text)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"i'm abcd. my favorite subject is stem (science tech eng math). please come to vist the website  some html ... . i make $234234 every year!!!!\n"}},"pos":9,"start":1627535723541,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535723741,"exec_count":21,"id":"55e9ad","input":"# 4.Contraction mapping\ntext = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in text.split(\" \")])\nprint(text)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"i am abcd. my favorite subject is stem (science tech eng math). please come to vist the website  some html ... . i make $234234 every year!!!!\n"}},"pos":10,"start":1627535723736,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535723939,"exec_count":22,"id":"b212db","input":"# 5.get rid of non words and extra spaces\n# Remove (â€˜s)\n# Eliminate punctuations and special characters\ntext = re.sub('\\\\W', ' ', text)\ntext = re.sub('\\n', '', text)\ntext = re.sub(' +', ' ', text)\ntext = re.sub('^ ', '', text)\ntext = re.sub(' $', '', text)\ntext = re.sub(r'\\([^)]*\\)', '', text)\ntext = re.sub('\"','', text)  \ntext = re.sub(r\"'s\\b\",\"\",text)\ntext = re.sub(\"[^a-zA-Z]\", \" \", text) \ntext = re.sub('[m]{2,}', 'mm', text)\nprint(text)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"i am abcd my favorite subject is stem science tech eng math please come to vist the website some html i make        every year\n"}},"pos":11,"start":1627535723931,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535724067,"exec_count":23,"id":"c0401e","input":"# 6.Remove stopwords using NLTK\nimport nltk\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')\n\nstop_words = set(stopwords.words('english')) \n","kernel":"python3-ubuntu","output":{"0":{"name":"stderr","text":"[nltk_data] Downloading package stopwords to /projects/ae15c660-30de-4\n[nltk_data]     74e-abca-5963358c9eb9/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n"}},"pos":12,"start":1627535724061,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535724194,"exec_count":24,"id":"b3d5eb","input":"print(stop_words)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"{'himself', 'any', \"didn't\", 't', 'by', 'y', 'same', 'your', 'between', 'very', 'these', 'can', 'has', \"don't\", 'll', 'off', 'you', 'before', 'if', 'was', 'how', 'her', 'not', \"you've\", 'ours', 'in', 'each', \"doesn't\", 'ma', 'our', 'a', \"she's\", 'that', 'will', \"shan't\", \"should've\", \"won't\", 'mightn', 'but', 'no', \"hasn't\", 'some', 'during', 'from', 'too', 'theirs', 'until', 'themselves', 'out', 'further', 'being', 'needn', 'does', 'wouldn', 'they', 'myself', 'is', 'while', 'this', \"isn't\", \"shouldn't\", 'haven', 'such', 'didn', 'now', 'm', 'whom', \"you're\", \"mightn't\", 'have', \"haven't\", 's', 'for', 'i', 'were', 'hadn', 'ourselves', 'its', 'yours', 'under', 'she', 'hers', 'at', 'ain', 'because', 'been', 'doesn', 'aren', 'which', 'hasn', 'just', \"weren't\", 'below', 'both', 'it', 'after', 'we', 'herself', 'few', 'do', 'don', 'more', 'd', 'yourself', 'won', 'be', \"wouldn't\", 'had', 'other', 'an', 'on', 'he', 'up', \"hadn't\", 'having', 'wasn', \"wasn't\", 'own', 'me', 'them', \"couldn't\", 'their', 'into', 'itself', 'isn', 'so', 'shan', 'am', 're', 'shouldn', 'with', 'again', 'down', 'where', 'only', \"that'll\", 'mustn', 'doing', 'did', 'about', 'of', 'why', 'are', 'than', 'and', 'yourselves', \"you'd\", 'him', 'or', 'once', 'as', 'there', 'most', 'through', \"needn't\", 'weren', 'nor', 'those', 'against', \"it's\", 'couldn', 'should', \"you'll\", 'my', 'his', 'what', 'o', 'all', \"mustn't\", 've', \"aren't\", 'here', 'to', 'above', 'who', 'the', 'over', 'when', 'then'}\n"}},"pos":13,"start":1627535724188,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535724392,"exec_count":25,"id":"0817c7","input":"num = 0\nif(num==0):\n    tokens = [w for w in text.split() if not w in stop_words]\nelse:\n    tokens=text.split()\n    \nprint(tokens)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"['abcd', 'favorite', 'subject', 'stem', 'science', 'tech', 'eng', 'math', 'please', 'come', 'vist', 'website', 'html', 'make', 'every', 'year']\n"}},"pos":14,"start":1627535724388,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535724503,"exec_count":26,"id":"c19789","input":"# 7.Remove short words\nlong_words=[]\nfor i in tokens:\n    if len(i)>1:                                                 #removing short word\n        long_words.append(i)   \n\nprint(long_words)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"['abcd', 'favorite', 'subject', 'stem', 'science', 'tech', 'eng', 'math', 'please', 'come', 'vist', 'website', 'html', 'make', 'every', 'year']\n"}},"pos":15,"start":1627535724498,"state":"done","type":"cell"}
{"cell_type":"code","end":1627535724627,"exec_count":27,"id":"de023e","input":"cleaned_text = (\" \".join(long_words)).strip()\nprint(cleaned_text)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"abcd favorite subject stem science tech eng math please come vist website html make every year\n"}},"pos":16,"start":1627535724622,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"aad065","input":"","pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b9c86e","input":"","pos":19,"state":"done","type":"cell"}
{"cell_type":"code","id":"15a649","input":"","pos":18,"type":"cell"}
{"cell_type":"code","id":"768dd1","input":"","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"51d1e8","input":"## require packages if you have not installed \n\n        pip install bs4\n        pip install lxml\n        pip install nltk","kernel":"python3-ubuntu","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cb1d7d","input":"## Data Preprocessing\n\nObjectives: \n\nWe will present how to apply the following preprocessing tasks to a simple example:\n\n1.Convert everything to lowercase\n\n2.Remove HTML tags\n\n3.Contraction mapping\n\n4.Remove (â€˜s)\n\n5.Remove any text inside the parenthesis ( )\n\n6.Eliminate punctuations and special characters\n\n7.Remove stopwords\n\n8.Remove short words","pos":0,"type":"cell"}
{"id":0,"time":1627532572618,"type":"user"}
{"last_load":1627532572813,"type":"file"}
{"backend_state":"init","kernel":"python3-ubuntu","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"Tic_Tac_Toe.ipynb","provenance":[],"toc_visible":true},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"009da3","input":"","metadata":{"id":"N7ITFMZbIQS3"},"pos":84,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"03e85d","input":"","metadata":{"id":"c_60TdiRIQS4"},"pos":85,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0a1be8","input":"","metadata":{"id":"aBLH55PJNLgU"},"pos":99,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1a65b5","input":"","metadata":{"id":"0ixhbuw5NGOO"},"pos":98,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2e868c","input":"","metadata":{"id":"BZgoT968IQS5"},"pos":89,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"353963","input":"","metadata":{"id":"DTgFYAHpIQS6"},"pos":95,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3b6204","input":"","metadata":{"id":"5CJhPFoiIQS5"},"pos":93,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"40e9ac","input":"","pos":60,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"475795","input":"","metadata":{"id":"_TafCeIHIQS5"},"pos":88,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5ef7bf","input":"","metadata":{"id":"FZjkkO2LOATC"},"pos":100,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"789a4a","input":"","metadata":{"id":"YvULmZLIIQS4"},"pos":87,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8da8dc","input":"","metadata":{"id":"owaSdTutIQS5"},"pos":91,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"96b234","input":"","metadata":{"id":"gPm1h9tKIQS5"},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"978288","input":"","metadata":{"id":"8hDvIv_RIQS6"},"pos":96,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b3db18","input":"","metadata":{"id":"W_QseGcBIQS4"},"pos":86,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c1fa50","input":"","metadata":{"id":"eUVoauUOIQS5"},"pos":94,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d795fd","input":"","pos":61,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"eca296","input":"","metadata":{"id":"h-S9dbZ-IQS5"},"pos":92,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fea326","input":"","metadata":{"id":"KLBpy6b1NEl9"},"pos":97,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"3afba5","input":"# use print statement to make a square \nprint(' --- ')\nprint('|   |')\nprint(' ---')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9Ku2xik3NM9F","outputId":"96eb28e1-c170-4799-a399-c7a6b4cab9b7"},"output":{"0":{"name":"stdout","output_type":"stream","text":" --- \n|   |\n ---\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"d9944e","input":"# method 1 \n# make a 3x3 grid?\nprint(' --- --- ---')\nprint('|   |   |   |')\nprint(' --- --- ---')\nprint('|   |   |   |')\nprint(' --- --- ---')\nprint('|   |   |   |')\nprint(' --- --- ---')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hEQ8-oplIQSk","outputId":"709987fb-f14c-4b60-b0e6-0909974a6285"},"output":{"0":{"name":"stdout","output_type":"stream","text":" --- --- ---\n|   |   |   |\n --- --- ---\n|   |   |   |\n --- --- ---\n|   |   |   |\n --- --- ---\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"717462","input":"# method 2 \na = ' --- --- ---'\nb = '|   |   |   |'\nprint(a + '\\n' + b + '\\n'+ a + '\\n' + b + '\\n' + a +  '\\n' + b +  '\\n' + a)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BhtJNKQDIQSl","outputId":"2adde681-4c10-452d-bec0-011a89e2a1a3"},"output":{"0":{"name":"stdout","output_type":"stream","text":" --- --- ---\n|   |   |   |\n --- --- ---\n|   |   |   |\n --- --- ---\n|   |   |   |\n --- --- ---\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"03ab87","input":"# if we need to print something multiple times \n\nprint(' ---' * 3)\n\nprint('|   ' * 4)","output":{"0":{"name":"stdout","output_type":"stream","text":" --- --- ---\n|   |   |   |   \n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"577e2d","input":"# method 3\na = ' --- --- ---'\nb = '|   |   |   |'\nfor index in range(3):\n    print(a)\n    print(b)\nprint(a)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f57frfxzIQSm","outputId":"2ec3a066-9925-47d4-e1c5-4534d9d1f1fd"},"output":{"0":{"name":"stdout","output_type":"stream","text":" --- --- ---\n|   |   |   |\n --- --- ---\n|   |   |   |\n --- --- ---\n|   |   |   |\n --- --- ---\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"3682a5","input":"# method 4 \ndef print_horiz_line():\n    print(\" --- \" * 3)\ndef print_vert_line():\n    print(\"|    \" * (3 + 1))\n\nif __name__ == \"__main__\":\n    for index in range(3):\n        print_horiz_line()\n        print_vert_line()\n    print_horiz_line()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qsqa_T69IQSn","outputId":"62239cd8-8ced-41af-d5e3-7163f0fea406"},"output":{"0":{"name":"stdout","output_type":"stream","text":" ---  ---  --- \n|    |    |    |    \n ---  ---  --- \n|    |    |    |    \n ---  ---  --- \n|    |    |    |    \n ---  ---  --- \n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"33264f","input":"# modify the code to work for any size of game board \n\n# board_size = int(input(\"What size of game board? \"))\n\nboard_size = int(input('enter the size of the board that you want: '))\n\ndef print_horiz_line():\n    print(\" --- \" * board_size)\ndef print_vert_line():\n    print(\"|    \" * (board_size + 1))\n\nif __name__ == \"__main__\":\n    for index in range(board_size):\n        print_horiz_line()\n        print_vert_line()\n    print_horiz_line()","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"enter the size of the board that you want: "},"output_type":"stream","value":"3"}}},"colab":{"base_uri":"https://localhost:8080/"},"id":"bsFlMXVWIQSn","outputId":"78e590b4-b114-4428-bf36-8fa12cf09c73"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"enter the size of the board that you want: "},"output_type":"stream","value":"3"},"1":{"name":"stdout","output_type":"stream","text":" ---  ---  --- \n|    |    |    |    \n ---  ---  --- \n|    |    |    |    \n ---  ---  --- \n|    |    |    |    \n ---  ---  --- \n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"9e7b3f","input":"a = 3 \n\n# if a > 0, print \"a is positive\"\n# else, print \"a is negative\"\n\nif a>0:\n    print('a is positive')\nelse:\n    print('a is negative')","output":{"0":{"name":"stdout","output_type":"stream","text":"a is positive\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"e4356d","input":"def check_number(a):\n    if a>0:\n        print('a is positive')\n    else:\n        print('a is negative')","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"b3d14e","input":"check_number(0.234)","output":{"0":{"name":"stdout","output_type":"stream","text":"a is positive\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"9b1797","input":"check_number(-123341)","output":{"0":{"name":"stdout","output_type":"stream","text":"a is negative\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"85bdd9","input":"# if a > 0, print \"a is positive\"\n# else if, print \"a is negative\"\n# else, print 'a is 0'\n\na = 0\n\nif a > 0:\n    print('a is positive')\nelif a < 0: \n    print('a is negative')\nelse:\n    print('a is zero')","output":{"0":{"name":"stdout","output_type":"stream","text":"a is zero\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"468a5b","input":"# empty list \nempty_list = []","metadata":{"id":"SHqPjqvBIQSp"},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"1fd506","input":"# list of numbers  \nlist_of_numbers = [1, 2, -213, 123, 123.23, -0.123]","metadata":{"id":"Eb-8ZoO-RfBr"},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"77d4da","input":"print('the 1st element of list_of_numbers is ', list_of_numbers[0])","output":{"0":{"name":"stdout","output_type":"stream","text":"the 1st element of list_of_numbers is  1\n"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"170ee0","input":"print('the 2nd element of list_of_numbers is ', list_of_numbers[1])","output":{"0":{"name":"stdout","output_type":"stream","text":"the 2nd element of list_of_numbers is  2\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"31dbc3","input":"print('the length of the list is ', len(list_of_numbers))","output":{"0":{"name":"stdout","output_type":"stream","text":"the length of the list is  6\n"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"7fa38a","input":"# print out all the elements \nfor item in list_of_numbers:\n    print(item)","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n-213\n123\n123.23\n-0.123\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"2be20a","input":"# alternative way to print all the elements in a list using index \nfor index in range(len(list_of_numbers)):\n    print(list_of_numbers[index])","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n-213\n123\n123.23\n-0.123\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"7f1a52","input":"game = [[1,2,0], [2,1,0], [2,1,2]]","metadata":{"id":"AnNFQiWaIQSo"},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"05556d","input":"print('the 1st row, 1st column element = ', game[0][0])","metadata":{"id":"YyaOsdg9IQSp","outputId":"7a80d3f9-b767-479d-99f6-3525331cd621"},"output":{"0":{"name":"stdout","output_type":"stream","text":"the 1st row, 1st column element =  1\n"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"d43d31","input":"print('the 1st row, 2nd column element = ', game[0][1])","metadata":{"id":"kRwy67_5IQSp"},"output":{"0":{"name":"stdout","output_type":"stream","text":"the 1st row, 2nd column element =  2\n"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"012fe7","input":"print('the 1st row, 3rd column element = ', game[0][2])","metadata":{"id":"JmDFR1YkIQSq"},"output":{"0":{"name":"stdout","output_type":"stream","text":"the 1st row, 3rd column element =  0\n"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"7d4678","input":"print('the 2nd row, 1st column element = ', game[1][0])","metadata":{"id":"PraL5_lkIQSq"},"output":{"0":{"name":"stdout","output_type":"stream","text":"the 2nd row, 1st column element =  2\n"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"e5a07c","input":"print('the 2nd row, 2nd column element = ', game[1][1])","output":{"0":{"name":"stdout","output_type":"stream","text":"the 2nd row, 2nd column element =  1\n"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"066c5d","input":"print('the 2nd row, 3rd column element = ', game[1][2])","output":{"0":{"name":"stdout","output_type":"stream","text":"the 2nd row, 3rd column element =  0\n"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"ee814c","input":"len(game)","output":{"0":{"data":{"text/plain":"3"},"exec_count":36,"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"b8df86","input":"len(game[0])","output":{"0":{"data":{"text/plain":"3"},"exec_count":37,"output_type":"execute_result"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"2858a1","input":"# the first row \ngame[0]","output":{"0":{"data":{"text/plain":"[1, 2, 0]"},"exec_count":38,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"0a065f","input":"# the first row \ngame[0][:]","output":{"0":{"data":{"text/plain":"[1, 2, 0]"},"exec_count":39,"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"6f7c9c","input":"# in most CS class/books, the first thing, you will learn is how to print \"hello world!\" statement \nprint('Hello world!')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gag5g-ncKZ_T","outputId":"2b847eb9-7f54-4166-ffbe-79350ea2fd31"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Hello world!\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"03464d","input":"# print all the elements on the first row \n\nfor col in range(len(game[0])):\n    print(game[0][col])","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n0\n"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"25c9b0","input":"# the first column, the code below does not work \ngame[:][0]","output":{"0":{"data":{"text/plain":"[1, 2, 0]"},"exec_count":41,"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"505249","input":"# print all the elements on the first column \n\nfor row in range(len(game)):\n    print(game[row][0])","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n2\n"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"dd9564","input":"def checkGrid(grid):\n    # rows\n    for x in range(0,3):\n        row = set([grid[x][0],grid[x][1],grid[x][2]])\n        if len(row) == 1 and grid[x][0] != 0:\n            return grid[x][0]\n\n    # columns\n    for x in range(0,3):\n        column = set([grid[0][x],grid[1][x],grid[2][x]])\n        if len(column) == 1 and grid[0][x] != 0:\n            return grid[0][x]\n\n    # diagonals\n    diag1 = set([grid[0][0],grid[1][1],grid[2][2]])\n    diag2 = set([grid[0][2],grid[1][1],grid[2][0]])\n    if len(diag1) == 1 or len(diag2) == 1 and grid[1][1] != 0:\n        return grid[1][1]\n\n    return 0\n","metadata":{"id":"2_DAh5jKIQSq"},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"5e581f","input":"winner_is_2 = [[2, 2, 0],\n               [2, 1, 0],\n               [2, 1, 1]]","metadata":{"id":"XUu15QEmIQSr"},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"430484","input":"print(checkGrid(winner_is_2))","metadata":{"id":"7ljEHKI4IQSr"},"output":{"0":{"name":"stdout","output_type":"stream","text":"2\n"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"3547b3","input":"winner_is_1 = [[1, 2, 0],\n               [2, 1, 0],\n               [2, 1, 1]]","metadata":{"id":"XI_ClH0CIQSr"},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"d9d69f","input":"print(checkGrid(winner_is_1))","metadata":{"id":"F31U5X6aIQSs"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1\n"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"6d1479","input":"no_winner = [[1, 2, 0],\n             [2, 1, 0],\n             [2, 1, 2]]","metadata":{"id":"OOBTfMucIQSs"},"pos":58,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"263404","input":"print(checkGrid(no_winner))","metadata":{"id":"ob8dGNGuIQSs"},"output":{"0":{"name":"stdout","output_type":"stream","text":"0\n"}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"6694d4","input":"# in python, you can use single quotation or double quotation, they are equivalent \nprint(\"Hello world!\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qwYwqTdhKnKh","outputId":"d15a4e4d-536d-4889-e916-10155fa4d477"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Hello world!\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"988577","input":"# initialise the game board\ngameboard = [(['.']*3) for i in range(3)]","metadata":{"id":"sqlJPc3pIQSt"},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"4f9d2a","input":"# variables for input and turn count\nrow_col = [0]\nturn = 1","metadata":{"id":"uiszPGHhIQSt"},"pos":65,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"f17baa","input":"# checks that the input is valid \n# - that it is in the format \"row,col\"\n# - that the position is free\ndef input_valid(values):\n    # input has only two values\n    if len(values) != 2:\n        print(\"Input must be two numbers in format row,col e.g.  1,2 \")\n        return 0\n    # input is a number between 1 and 3 (inclusive)\n    try:\n        if (1 <= int(values[0]) <= 3) and (1 <= int(values[1]) <= 3):\n            # checks if the position on the board is alreay filled\n            if gameboard[int(values[0])-1][int(values[1])-1] != '.':\n                print (\"Position on board already taken.\")\n                return 0\n            return 1\n        else:\n            print(\"Input values must be numbers between 1 and 3 (inclusive)\")\n            return 0\n    except ValueError:\n        print (\"Input values must be numbers between 1 and 3 (inclusive)\")\n        return 0","metadata":{"id":"FNgST81tIQSu"},"pos":66,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"d0f405","input":"# draw the board\ndef draw_board(values, player):\n    # changes the value to X or O\n    gameboard[int(values[0])-1][int(values[1])-1]=player\n\n    # print the gameboard\n    for row in gameboard:\n        print(row)","metadata":{"id":"EWS76MWqIQSu"},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"145b09","input":"# calculate if game is over (no more '.' or has winner)\ndef game_over():\n    searcht = '.'\n\n    # check win by row\n    for i in range(3):\n        if len(set(gameboard[i])) == 1:\n            if gameboard[i][1] == '.':\n                continue\n            elif gameboard[i][1] == 'X':\n                print (\"Game over - Player 1 wins\")\n            #elif gameboard[i][1] == 'O':\n            else:\n                print (\"Game over - Player 2 wins\")\n            return 1\n\n    # check win by column\n    for i in range(3):\n        if gameboard[0][i] == gameboard[1][i] == gameboard[2][i]:\n            if gameboard[0][i] == '.':\n                continue\n            elif gameboard[0][i] == 'X':\n                print (\"Game over - Player 1 wins\")\n            else:\n                print (\"Game over - Player 2 wins\")\n            return 1\n\n    # check win by diagonal\n    if (gameboard[0][0] == gameboard[1][1] == gameboard[2][2]) or (gameboard[0][2] == gameboard[1][1] == gameboard[2][0]): \n        if gameboard[1][1] == 'X':\n            print (\"Game over - Player 1 wins\")\n        elif gameboard[1][1] == 'O':\n            print (\"Game over - Player 2 wins\")\n        else:\n            return 0\n        return 1\n\n    # check board is full\n    for sublist in gameboard:\n        if searcht in sublist:\n            return 0\n\n    print (\"Game over - the board is filled\")\n    return 1","metadata":{"id":"iLGt3-LWIQSu"},"pos":68,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"10838a","input":"def draw_line(width, edge, filling):\n    print(filling.join([edge] * (width + 1)))","metadata":{"id":"BS1vhN7oIQSv"},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"b28680","input":"def display_winner(player):\n    if player == 0:\n        print(\"Tie\")\n    else:\n        print(\"Player \" + str(player) + \" wins!\")","metadata":{"id":"lQrerWHCIQSw"},"pos":71,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"28a3b3","input":"def check_row_winner(row):\n    \"\"\"\n    Return the player number that wins for that row.\n    If there is no winner, return 0.\n    \"\"\"\n    if row[0] == row[1] and row[1] == row[2]:\n        return row[0]\n    return 0","metadata":{"id":"tIVM1mSOIQSw"},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"41c50c","input":"def get_col(game, col_number):\n    return [game[x][col_number] for x in range(3)]","metadata":{"id":"ldzpzryPIQSw"},"pos":73,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"32aff7","input":"def get_row(game, row_number):\n    return game[row_number]","metadata":{"id":"FDssQN_qIQSx"},"pos":74,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"9da7b7","input":"# use \\n to write new line \nprint('Hello world! \\nMy name is Stella.')","output":{"0":{"name":"stdout","output_type":"stream","text":"Hello world! \nMy name is Stella.\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"0d1896","input":"def check_winner(game):\n    game_slices = []\n    for index in range(3):\n        game_slices.append(get_row(game, index))\n        game_slices.append(get_col(game, index))\n    # check diagonals\n    down_diagonal = [game[x][x] for x in range(3)]\n    up_diagonal = [game[0][2], game[1][1], game[2][0]]\n    game_slices.append(down_diagonal)\n    game_slices.append(up_diagonal)\n    for game_slice in game_slices:\n        winner = check_row_winner(game_slice)\n        if winner != 0:\n            return winner\n\n    return winner","metadata":{"id":"5OeLvHyJIQSy"},"pos":75,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"9f90d6","input":"def start_game():\n    return [[0, 0, 0] for x in range(3)]","metadata":{"id":"Z9wZokBtIQSy"},"pos":76,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"e91ed4","input":"def display_game(game):\n    d = {2: \"O\", 1: \"X\", 0: \"_\"}\n    draw_line(3, \" \", \"_\")\n    for row_num in range(3):\n        new_row = []\n        for col_num in range(3):\n            new_row.append(d[game[row_num][col_num]])\n        print(\"|\" + \"|\".join(new_row) + \"|\")","metadata":{"id":"P1_WenfNIQS0"},"pos":77,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"b33b74","input":"def add_piece(game, player, row, column):\n    \"\"\"\n    game: game state\n    player: player number\n    row: 0-index row\n    column: 0-index column\n    \"\"\"\n    game[row][column] = player\n    return game","metadata":{"id":"XiNGk6jlIQS0"},"pos":78,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"219532","input":"def check_space_empty(game, row, column):\n    return game[row][column] == 0","metadata":{"id":"vOlK4mwOIQS0"},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"5ae7cc","input":"def convert_input_to_coordinate(user_input):\n    return user_input - 1","metadata":{"id":"W05ILbG4IQS1"},"pos":80,"type":"cell"}
{"cell_type":"code","exec_count":66,"id":"f38457","input":"def switch_player(player):\n    if player == 1:\n        return 2\n    else:\n        return 1","metadata":{"id":"OZqeOoyyIQS2"},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"1c5ea0","input":"def moves_exist(game):\n    for row_num in range(3):\n        for col_num in range(3):\n            if game[row_num][col_num] == 0:\n                return True\n    return False","metadata":{"id":"P92wLnuTIQS2"},"pos":82,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"710325","input":"if __name__ == '__main__':\n    game = start_game()\n    display_game(game)\n    player = 1\n    winner = 0  # the winner is not yet defined\n\n    # go on forever\n    while winner == 0 and moves_exist(game):\n        print(\"Currently player: \" + str(player))\n        available = False\n        while not available:\n            row = convert_input_to_coordinate(int(input(\"Which row? (start with 1) \")))\n            column = convert_input_to_coordinate(int(input(\"Which column? (start with 1) \")))\n            available = check_space_empty(game, row, column)\n        game = add_piece(game, player, row, column)\n        display_game(game)\n        player = switch_player(player)\n        winner = check_winner(game)\n    display_winner(winner)","metadata":{"cocalc":{"outputs":{"1":{"name":"input","opts":{"password":false,"prompt":"Which row? (start with 1) "},"output_type":"stream"},"2":{"name":"input","opts":{"password":false,"prompt":"Which column? (start with 1) "},"output_type":"stream","value":"2"},"3":{"name":"input","opts":{"password":false,"prompt":"Which row? (start with 1) "},"output_type":"stream"},"5":{"name":"input","opts":{"password":false,"prompt":"Which column? (start with 1) "},"output_type":"stream","value":"3"},"6":{"name":"input","opts":{"password":false,"prompt":"Which row? (start with 1) "},"output_type":"stream"}}},"id":"pqzaXX1qIQS3","outputId":"019ab6bd-f97f-47d5-818a-72530c5cd4a2"},"output":{"0":{"name":"stdout","output_type":"stream","text":" _ _ _ \n|_|_|_|\n|_|_|_|\n|_|_|_|\nCurrently player: 1\n"},"1":{"name":"input","opts":{"password":false,"prompt":"Which row? (start with 1) "},"output_type":"stream"}},"pos":83,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"e51924","input":"# what if we need to print 5 times? \n\nfor k in range(5):\n    print('Hello world!')","output":{"0":{"name":"stdout","output_type":"stream","text":"Hello world!\nHello world!\nHello world!\nHello world!\nHello world!\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"b6f989","input":"# how can i add numbers? \nfor k in range(5):\n    print(k, 'Hello world!')","output":{"0":{"name":"stdout","output_type":"stream","text":"0 Hello world!\n1 Hello world!\n2 Hello world!\n3 Hello world!\n4 Hello world!\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"ffea9a","input":"# how can i add numbers? \nfor k in range(1,6):\n    print(k, 'Hello world!')","output":{"0":{"name":"stdout","output_type":"stream","text":"1 Hello world!\n2 Hello world!\n3 Hello world!\n4 Hello world!\n5 Hello world!\n"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"1de62e","input":"## Task 2: Check Tic Tac Toe\n\nSuppose a game of Tic Tac Toe is represented as a list of lists. \n\n* 0 means an empty square, \n* 1 means that player 1 put their token in that space, \n* 2 means that player 2 put their token in that space. \n\nWrite a program to check whether anyone has won, and tell me which player won, if any. \n\nRule of tic-tac-toe game. A Tic Tac Toe win is 3 in a row - either in a row, a column, or a diagonal. Don’t worry about the case where TWO people have won - assume that in every board there will only be one winner.\n\n\n","metadata":{"id":"b95TzG-OIQSo"},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"353c28","input":"#### LEARN if ... else ...","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"3c2ad4","input":"## In this tutorial you will build a mini version of the classic tic-tac-toe game \n","metadata":{"id":"rtjMJi5EKs2I"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"4f8b6f","input":"#### LEARN print statement","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"561a4a","input":"### In class exercise\n\nIf you are given a list of integers: \n\nl = [123, -123, 1, 0, 12334136, -134314, 11, 34] \n\ndivide the list above into two lists: even and odd. \n\nThe expected output will be \n\neven = [0, 12334136, -134314, 34]\n\nodd = [123, -123, 1, 11]\n","metadata":{"id":"LtuENmbGReh6"},"pos":36,"type":"cell"}
{"cell_type":"markdown","id":"566e76","input":"### In class exercise\n\n\nSuppose a game of Tic Tac Toe is represented as a list of lists. \n\n* 0 means an empty square, \n* 1 means that player 1 put their token in that space, \n* 2 means that player 2 put their token in that space. \n\nWrite a program to check whether anyone has won, and tell me which player won, if any. \n\n\nFor example: \n\nwinner_is_2 = [[2, 2, 0],\n               [2, 1, 0],\n               [2, 1, 1]]\n               \nwinner_is_1 = [[1, 2, 0],\n               [2, 1, 0],\n               [2, 1, 1]]\n               \nno_winner = [[1, 2, 0],\n             [2, 1, 0],\n             [2, 1, 2]]               ","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"7deea3","input":"#### LEARN list ","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"989d03","input":"##### Task 3:\n1) Assume that player 1 (the first player to move) will always be X and player 2 (the second player) will always be O. \n\n2) To people who don’t program, starting to count at 0 is a strange concept, so it is better for the user experience if the row counts and column counts start at 1. So, if I want to move starting from (1, 1) instead of (0, 0). \n\n3) Ask the user to enter coordinates in the form “row,col” - a number, then a comma, then a number. \n\n4) Don’t worry about checking whether someone won the game, but if a player tries to put a piece in a game position where there already is another piece, do not allow the piece to go there.\n\n5) Keep track of how many squares are full and automatically stop asking for moves when there are no more valid moves.\n\nreview: .split() and .strip()","metadata":{"id":"vsMmZcYZIQSt"},"pos":63,"type":"cell"}
{"cell_type":"markdown","id":"c0d4b9","input":"#### In class exercise\n\nA school has following rules for grading system:\n\na. Below 25 - F\n\nb. 25 to 45 - E\n\nc. 45 to 50 - D\n\nd. 50 to 60 - C\n\ne. 60 to 80 - B\n\nf. Above 80 - A\n\nAsk user to enter marks and print the corresponding grade.","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"c3190e","input":"#### LEARN list of lists","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"d60f88","input":"#### LEARN if ... elseif ... else ","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"da6d4d","input":"## Task 4: put all these three components together to make a two-player Tic Tac Toe game! \n\nYour challenge in this exercise is to use the functions from those previous exercises all together in the same program to make a two-player game that you can play with a friend. You should keep track of who won - if there is a winner, show a congratulatory message on the screen. If there are no more moves left, don’t ask for the next player’s move! Ask the players if they want to play again and keep a running tally of who won more - Player 1 or Player 2.","metadata":{"id":"jwu7UfzoIQSv"},"pos":69,"type":"cell"}
{"cell_type":"markdown","id":"db3540","input":"#### LEARN define functions ","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"e90ac9","input":"### the rest will be used for challenge ","pos":62,"type":"cell"}
{"cell_type":"markdown","id":"e9bb6d","input":"objectives: \n\n1) print statement \n\n2) create list, list of lists \n\n3) learn for, if ... else if ... else loop \n\n4) define your own functions","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"ec604b","input":"### Task 1: make the game board","metadata":{"id":"XO3q-lGANIGR"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"f356c2","input":"#### LEARN for loop","pos":7,"type":"cell"}
{"id":0,"time":1627544632001,"type":"user"}
{"last_load":1627544632379,"type":"file"}
{"backend_state":"ready","connection_file":"","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"066422","input":"MAX_NB_WORDS = 100000\nEMBEDDING_DIM = 300\n\nprint('Preparing embedding matrix...')\nnb_words = min(MAX_NB_WORDS, output_lang.n_words)\nembedding_matrix = np.zeros((nb_words, EMBEDDING_DIM))\n\nnull_words = open('null_words.txt', 'w', encoding='utf-8')\n\nfor word, idx in output_lang.word2index.items():\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[idx] = embedding_vector\n    else:\n        null_words.write(word + '\\n')\nprint('Null_word embeddings: %d' % np.sum(np.sum(embedding_matrix, axis=1) != 0))","pos":127,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0680c2","input":"","pos":131,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1a2b3d","input":"","pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"258832","input":"","pos":106,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2e3cad","input":"","pos":104,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"434cd9","input":"","pos":107,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"43e0fe","input":"","pos":88,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4e87c4","input":"def load_pretrain_embedding(file):\n    \"\"\"\n    Return a dictionary whose key is word, value is pretrained word embedding.\n    \"\"\"\n    print('Indexing word vectors')\n    embeddings_index = {}\n    f = open(file, 'r', encoding='utf-8')\n    for line in f:\n        values = line.split()\n        try:\n            word = values[0]\n            coefs = np.array(values[1:], dtype='float32')\n            embeddings_index[word] = coefs\n        except:\n            print(\"Error on: \", values[:3])\n    f.close()\n    print(\"Total %s word vectors\" % len(embeddings_index))\n    return embeddings_index","pos":125,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"539c67","input":"# hidden_size = 128\n# # input is an one-hot vector\n# encoder = EncoderRNN(input_lang.n_words, hidden_size).to(device)\n\n# attn_decoder = AttnDecoderRNN(hidden_size, output_lang.n_words).to(device)\n\n# # attn_decoder = AttnDecoderRNN(hidden_size, output_lang.n_words, dropout_p=0.1).to(device)\n\n# trainIters(encoder, attn_decoder, 3000, print_every= 200)","pos":108,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"53b236","input":"output_words, attentions = evaluate(encoder, attn_decoder, random.choice(pairs)[0])\nplt.matshow(attentions.numpy())","pos":118,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5aa4af","input":"","pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5cd66a","input":"def train(model, iterator, optimizer, criterion, clip):\n    \n    model.train()\n    \n    epoch_loss = 0\n    \n    for i, batch in enumerate(iterator):\n        \n        src = batch.src\n        trg = batch.trg\n        \n        optimizer.zero_grad()\n        \n        output = model(src, trg)\n        \n        #trg = [trg len, batch size]\n        #output = [trg len, batch size, output dim]\n        \n        output_dim = output.shape[-1]\n        \n        output = output[1:].view(-1, output_dim)\n        trg = trg[1:].view(-1)\n        \n        #trg = [(trg len - 1) * batch size]\n        #output = [(trg len - 1) * batch size, output dim]\n        \n        loss = criterion(output, trg)\n        \n        loss.backward()\n        \n        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n        \n        optimizer.step()\n        \n        epoch_loss += loss.item()\n        \n    return epoch_loss / len(iterator)","pos":99,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"60bff7","input":"FAST_TEXT_EMBEDDING = 'crawl-300d-2M.vec'","pos":124,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"75e850","input":"def evaluate(encoder, decoder, sentence, max_length=MAX_LENGTH):\n    with torch.no_grad():\n        input_tensor = tensorFromSentence(input_lang, sentence)\n        input_length = input_tensor.size()[0]\n        encoder_hidden = encoder.initHidden()\n\n        encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)\n\n        for ei in range(input_length):\n            encoder_output, encoder_hidden = encoder(input_tensor[ei],\n                                                     encoder_hidden)\n            encoder_outputs[ei] += encoder_output[0, 0]\n\n        decoder_input = torch.tensor([[SOS_token]], device=device)\n        decoder_hidden = encoder_hidden\n\n        decoded_words = []\n        decoder_attentions = torch.zeros(max_length, max_length)\n\n        for di in range(max_length):\n            decoder_output, decoder_hidden, decoder_attention = decoder(\n                decoder_input, decoder_hidden, encoder_outputs)\n            decoder_attentions[di] = decoder_attention.data\n            topvalue, topindex = decoder_output.data.topk(1)\n            if topindex.item() == EOS_token:\n                decoded_words.append('<EOS>')\n                break\n            else:\n                decoded_words.append(output_lang.index2word[topindex.item()])\n\n            decoder_input = topindex.squeeze().detach()\n\n        return decoded_words, decoder_attentions[:di + 1]","pos":111,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7c4bf6","input":"","pos":51,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7e17ee","input":"embeddings_index = load_pretrain_embedding(FAST_TEXT_EMBEDDING)","pos":126,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"82bcd1","input":"def showAttention(input_sentence, output_words, attentions):\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    cax = ax.matshow(attentions.numpy(), cmap='bone')\n    fig.colorbar(cax)\n\n    ax.set_xticklabels([''] + input_sentence.split(' ') + ['<EOS>'], rotation=90)\n    ax.set_yticklabels([''] + output_words)\n\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(1))\n    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n\n    plt.show()\n\n    \ndef evaluateAndShowAttention(input_sentence):\n    output_words, attentions = evaluate(encoder, attn_decoder, input_sentence)\n    print('input =', input_sentence)\n    print('output =', ' '.join(output_words))\n    showAttention(input_sentence, output_words, attentions)","pos":120,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8c32b3","input":"","pos":132,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"936383","input":"pre_hidden_size = 300\n\npre_encoder = EncoderRNN(input_lang.n_words, pre_hidden_size).to(device)\npre_attn_decoder = preAttnDecoderRNN(pre_hidden_size, output_lang.n_words, dropout_p=0.1).to(device)\n\ntrainIters(pre_encoder, pre_attn_decoder, 75000, print_every=5000)","pos":130,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"938623","input":"","pos":93,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"957739","input":"def trainIters(encoder, decoder, n_iters, print_every=1000, plot_every=100, learning_rate=0.01):\n    start = time.time()\n    plot_losses = []\n    print_loss_total, plot_loss_total = 0, 0\n\n    encoder_optimizer = optim.SGD(encoder.parameters(), lr=learning_rate)\n    decoder_optimizer = optim.SGD(filter(lambda p: p.requires_grad, decoder.parameters()), lr=learning_rate)\n    training_pairs = [tensorsFromPair(random.choice(pairs)) for i in range(n_iters)]\n    criterion = nn.NLLLoss()\n\n    for iter in range(1, n_iters + 1):\n        training_pair = training_pairs[iter - 1]\n        input_tensor = training_pair[0]\n        target_tensor = training_pair[1]\n\n        loss = train(input_tensor, target_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion)\n        print_loss_total += loss\n        plot_loss_total += loss\n\n        if iter % print_every == 0:\n            print_loss_avg = print_loss_total / print_every\n            print_loss_total = 0\n            print(\"Time: {} | ({} | {:.2f}%) avg: {:.4f}\".format(timeSince(start, iter / n_iters), iter, iter / n_iters * 100, print_loss_avg))\n\n        if iter % plot_every == 0:\n            plot_loss_avg = plot_loss_total / plot_every\n            plot_losses.append(plot_loss_avg)\n            plot_loss_total = 0\n\n    showPlot(plot_losses)","pos":129,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9b5c8a","input":"TRG_PAD_IDX = TRG.vocab.stoi[TRG.pad_token]\n\ncriterion = nn.CrossEntropyLoss(ignore_index = TRG_PAD_IDX)","pos":98,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9c26c3","input":"","pos":92,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a3f843","input":"","pos":23,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"aad551","input":"","pos":105,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b915e1","input":"","pos":95,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c712d1","input":"def evaluate(model, iterator, criterion):\n    \n    model.eval()\n    \n    epoch_loss = 0\n    \n    with torch.no_grad():\n    \n        for i, batch in enumerate(iterator):\n\n            src = batch.src\n            trg = batch.trg\n\n            output = model(src, trg, 0) #turn off teacher forcing\n\n            #trg = [trg len, batch size]\n            #output = [trg len, batch size, output dim]\n\n            output_dim = output.shape[-1]\n            \n            output = output[1:].view(-1, output_dim)\n            trg = trg[1:].view(-1)\n\n            #trg = [(trg len - 1) * batch size]\n            #output = [(trg len - 1) * batch size, output dim]\n\n            loss = criterion(output, trg)\n            \n            epoch_loss += loss.item()\n        \n    return epoch_loss / len(iterator)","pos":100,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cc7059","input":"evaluateAndShowAttention(\"elle a cinq ans de moins que moi .\")\nevaluateAndShowAttention(\"elle est trop petit .\")\nevaluateAndShowAttention(\"je ne crains pas de mourir .\")\nevaluateAndShowAttention(\"c est un jeune directeur plein de talent .\")","pos":121,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d751ad","input":"","pos":29,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"da4ce5","input":"","pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"da57a0","input":"def evaluateRandomly(encoder, decoder, n=10):\n    for i in range(n):\n        pair = random.choice(pairs)\n        print(\">\", pair[0])\n        print(\"=\", pair[1])\n        output_words, attentions = evaluate(encoder, attn_decoder, pair[0])\n        output_sentence = ' '.join(output_words)\n        print(\"<\", output_sentence)\n        print('\\n')","pos":113,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"db3790","input":"","pos":94,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dcd900","input":"","pos":96,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ddd0d1","input":"","pos":52,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e23f71","input":"evaluateRandomly(encoder, attn_decoder)","pos":115,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e4eacb","input":"","pos":97,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f435f5","input":"class preAttnDecoderRNN(nn.Module):\n    def __init__(self, hidden_size, output_size, dropout_p=0.1, max_length=MAX_LENGTH):\n        super(preAttnDecoderRNN, self).__init__()\n        self.hidden_size = hidden_size\n        self.output_size = output_size\n        self.dropout_p = dropout_p\n        self.max_length = max_length\n        \n        # load pre-train embedding\n        self.embedding = nn.Embedding(self.output_size, self.hidden_size)\n        self.embedding.weight.data.copy_(torch.from_numpy(embedding_matrix))\n        self.embedding.weight.requires_grad=False\n        \n        # Transform the double hidden features into probabilities with max_length size\n        self.attn = nn.Linear(self.hidden_size * 2, self.max_length)\n        self.attn_combine = nn.Linear(self.hidden_size * 2, self.hidden_size)\n        self.dropout = nn.Dropout(self.dropout_p)\n        self.gru = nn.GRU(self.hidden_size, self.hidden_size)\n        self.out = nn.Linear(self.hidden_size, self.output_size)\n\n    def forward(self, inpt, hidden, encoder_outputs):\n        embedded = self.embedding(inpt).view(1, 1, -1)\n        embedded = self.dropout(embedded)\n\n        attn_weights = F.softmax(self.attn(torch.cat((embedded[0], hidden[0]), 1)), dim=1)\n        attn_applied = torch.bmm(attn_weights.unsqueeze(0), encoder_outputs.unsqueeze(0))\n\n        output = torch.cat((embedded[0], attn_applied[0]), 1)\n        output = self.attn_combine(output).unsqueeze(0)\n\n        output = F.relu(output)\n        output, hidden = self.gru(output, hidden)\n\n        output = F.log_softmax(self.out(output[0]), dim=1)\n        return output, hidden, attn_weights\n\n    def initHidden(self):\n        return torch.zeros(1, 1, self.hidden_size, device=device)","pos":128,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f6f0e6","input":"","pos":64,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"8c6415","input":"MAX_LENGTH = 10\n\neng_prefixes = (\n    \"i am \", \"i m \",\n    \"he is\", \"he s \",\n    \"she is\", \"she s\",\n    \"you are\", \"you re \",\n    \"we are\", \"we re \",\n    \"they are\", \"they re \"\n)\n\ndef filterPair(p):\n    return len(p[0].split(' ')) < MAX_LENGTH and len(p[1].split(' ')) < MAX_LENGTH and p[1].startswith(eng_prefixes)\n\ndef filterPairs(pairs):\n    return [pair for pair in pairs if filterPair(pair)]","pos":22,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"bfb64b","input":"def prepareData(lang1, lang2, reverse=False):\n    input_lang, output_lang, pairs = readLangs(lang1, lang2, reverse)\n    \n    print(\"Read %s sentence pairs\" % len(pairs))\n    pairs = filterPairs(pairs)\n    \n    print(\"Trimmed to %s sentence pairs\" % len(pairs))\n    print(\"Counting words...\")\n    \n    for pair in pairs:\n        input_lang.addSentence(pair[0])\n        output_lang.addSentence(pair[1])\n    \n    print(\"Counted words:\")\n    print(input_lang.name, input_lang.n_words)\n    print(output_lang.name, output_lang.n_words)\n    \n    return input_lang, output_lang, pairs","pos":31,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"4c6da3","input":"input_lang, output_lang, pairs = prepareData('eng', 'fra', True)\n\ndata_overview_num = 10\nfor _ in range(data_overview_num):\n    print(random.choice(pairs))","output":{"0":{"name":"stdout","output_type":"stream","text":"Reading lines...\n"},"1":{"name":"stdout","output_type":"stream","text":"Read 135842 sentence pairs\nTrimmed to 10853 sentence pairs\nCounting words...\nCounted words:\nfra 4489\neng 2925\n['vous etes tres craintives .', 'you re very timid .']\n['vous n etes pas malade .', 'you re not sick .']\n['elles ont toutes faim .', 'they re all hungry .']\n['il est incapable de le faire .', 'he is unable to do it .']\n['cela me preoccupe .', 'i m concerned about it .']\n['tu es tres intelligente .', 'you re very smart .']\n['nous sommes depourvues de prejuges .', 'we re unprejudiced .']\n['j en ai fini de toi .', 'i m done with you .']\n['vous etes veinardes .', 'you re in luck .']\n['il est notre professeur d anglais .', 'he is our teacher of english .']\n"}},"pos":32,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"25f245","input":"pairs[0]","output":{"0":{"data":{"text/plain":"['j ai ans .', 'i m .']"},"exec_count":13,"output_type":"execute_result"}},"pos":33,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"f6efda","input":"pairs[1][0]","output":{"0":{"data":{"text/plain":"'je vais bien .'"},"exec_count":14,"output_type":"execute_result"}},"pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"f3201e","input":"pairs[1][1]","output":{"0":{"data":{"text/plain":"'i m ok .'"},"exec_count":15,"output_type":"execute_result"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"0396de","input":"len(pairs)","output":{"0":{"data":{"text/plain":"10853"},"exec_count":16,"output_type":"execute_result"}},"pos":36,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"993959","input":"type(pairs)","output":{"0":{"data":{"text/plain":"list"},"exec_count":17,"output_type":"execute_result"}},"pos":37,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"b773b2","input":"# class EncoderRNN(nn.Module):\n#     def __init__(self, input_size, hidden_size):\n#         super(EncoderRNN, self).__init__()\n#         self.hidden_size = hidden_size\n        \n#         self.embedding = nn.Embedding(input_size, hidden_size)\n#         self.gru = nn.GRU(hidden_size, hidden_size)\n        \n#     def forward(self, inpt, hidden):\n#         embedded = self.embedding(inpt).view(1, 1, -1)\n#         output = embedded\n#         output, hidden = self.gru(output, hidden)\n#         return output, hidden\n    \n#     def initHidden(self):\n#         return torch.zeros(1, 1, self.hidden_size, device=device)","pos":43,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":19,"id":"0331ff","input":"class Encoder(nn.Module):\n    def __init__(self, input_dim, emb_dim, hid_dim, n_layers, dropout):\n        super().__init__()\n        \n        self.hid_dim = hid_dim\n        self.n_layers = n_layers\n        \n        self.embedding = nn.Embedding(input_dim, emb_dim)\n        \n        self.rnn = nn.LSTM(emb_dim, hid_dim, n_layers, dropout = dropout)\n        \n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, src):\n        \n        #src = [src len, batch size]\n        \n        embedded = self.dropout(self.embedding(src))\n        \n        #embedded = [src len, batch size, emb dim]\n        \n        outputs, (hidden, cell) = self.rnn(embedded)\n        \n        #outputs = [src len, batch size, hid dim * n directions]\n        #hidden = [n layers * n directions, batch size, hid dim]\n        #cell = [n layers * n directions, batch size, hid dim]\n        \n        #outputs are always from the top hidden layer\n        \n        return hidden, cell","pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"871cee","input":"# import torch\n# import torch.nn as nn\n# import torch.optim as optim\n\n# from torchtext.legacy.datasets import Multi30k\n# from torchtext.legacy.data import Field, BucketIterator\n\n# BATCH_SIZE = 128\n\n# train_iterator, valid_iterator, test_iterator = BucketIterator.splits(\n#     (train_data, valid_data, test_data), \n#     batch_size = BATCH_SIZE, \n#     device = device)","output":{"0":{"ename":"ModuleNotFoundError","evalue":"No module named 'torchtext'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-00ef52a1db18>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptim\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0moptim\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtorchtext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMulti30k\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtorchtext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mField\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBucketIterator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'torchtext'"]}},"pos":102,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"dce43a","input":"class AttnDecoderRNN(nn.Module):\n    def __init__(self, output_dim, emb_dim, hid_dim, n_layers, dropout):\n        super().__init__()\n        \n        self.output_dim = output_dim\n        self.hid_dim = hid_dim\n        self.n_layers = n_layers\n        \n        self.embedding = nn.Embedding(output_dim, emb_dim)\n        \n        self.rnn = nn.LSTM(emb_dim, hid_dim, n_layers, dropout = dropout)\n        \n        self.fc_out = nn.Linear(hid_dim, output_dim)\n        \n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, input, hidden, cell):\n        \n        #input = [batch size]\n        #hidden = [n layers * n directions, batch size, hid dim]\n        #cell = [n layers * n directions, batch size, hid dim]\n        \n        #n directions in the decoder will both always be 1, therefore:\n        #hidden = [n layers, batch size, hid dim]\n        #context = [n layers, batch size, hid dim]\n        \n        input = input.unsqueeze(0)\n        \n        #input = [1, batch size]\n        \n        embedded = self.dropout(self.embedding(input))\n        \n        #embedded = [1, batch size, emb dim]\n                \n        output, (hidden, cell) = self.rnn(embedded, (hidden, cell))\n        \n        #output = [seq len, batch size, hid dim * n directions]\n        #hidden = [n layers * n directions, batch size, hid dim]\n        #cell = [n layers * n directions, batch size, hid dim]\n        \n        #seq len and n directions will always be 1 in the decoder, therefore:\n        #output = [1, batch size, hid dim]\n        #hidden = [n layers, batch size, hid dim]\n        #cell = [n layers, batch size, hid dim]\n        \n        prediction = self.fc_out(output.squeeze(0))\n        \n        #prediction = [batch size, output dim]\n        \n        return prediction, hidden, cell","pos":57,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"6697b1","input":"# class AttnDecoderRNN(nn.Module):\n#     def __init__(self, hidden_size, output_size, dropout_p=0.1, max_length=MAX_LENGTH):\n#         super(AttnDecoderRNN, self).__init__()\n#         self.hidden_size = hidden_size\n#         self.output_size = output_size\n#         self.dropout_p = dropout_p\n#         self.max_length = max_length\n\n#         self.embedding = nn.Embedding(self.output_size, self.hidden_size)\n#         # Transform the double hidden features into probabilities with max_length size\n# #         self.attn = nn.Linear(self.hidden_size * 2, self.max_length)\n# #         self.attn_combine = nn.Linear(self.hidden_size * 2, self.hidden_size)\n#         self.dropout = nn.Dropout(self.dropout_p)\n#         self.gru = nn.GRU(self.hidden_size, self.hidden_size)\n#         self.out = nn.Linear(self.hidden_size, self.output_size)\n\n#     def forward(self, inpt, hidden, encoder_outputs):\n#         embedded = self.embedding(inpt).view(1, 1, -1)\n#         embedded = self.dropout(embedded)\n\n# #         attn_weights = F.softmax(self.attn(torch.cat((embedded[0], hidden[0]), 1)), dim=1)\n# #         attn_applied = torch.bmm(attn_weights.unsqueeze(0), encoder_outputs.unsqueeze(0))\n\n# #         output = torch.cat((embedded[0], attn_applied[0]), 1)\n# #         output = self.attn_combine(output).unsqueeze(0)\n\n#         output = F.relu(output)\n#         output, hidden = self.gru(output, hidden)\n\n#         output = F.log_softmax(self.out(output[0]), dim=1)\n#         return output, hidden, attn_weights\n\n#     def initHidden(self):\n#         return torch.zeros(1, 1, self.hidden_size, device=device)","pos":58,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":22,"id":"544893","input":"def indexesFromSentence(lang, sentence):\n    return [lang.word2index[word] for word in sentence.split(' ')]\n\ndef tensorFromSentence(lang, sentence):\n    indexes = indexesFromSentence(lang, sentence)\n    indexes.append(EOS_token)\n    return torch.tensor(indexes, dtype=torch.long, device=device).view(-1, 1)\n\ndef tensorsFromPair(pair):\n    input_tensor = tensorFromSentence(input_lang, pair[0])\n    target_tensor = tensorFromSentence(output_lang, pair[1])\n    return (input_tensor, target_tensor)","pos":69,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"af6a57","input":"teacher_forcing_ratio = 0.5\n\ndef train(input_tensor, target_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion, max_length=MAX_LENGTH):\n    encoder_hidden = encoder.initHidden()\n    \n    encoder_optimizer.zero_grad()\n    decoder_optimizer.zero_grad()\n    \n    input_length = input_tensor.size(0)\n    target_length = target_tensor.size(0)\n    \n    encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)\n    loss = 0\n    \n    for en_i in range(input_length):\n        encoder_output, encoder_hidden = encoder(input_tensor[en_i], encoder_hidden)\n        encoder_outputs[en_i] = encoder_output[0, 0]\n        \n    decoder_input = torch.tensor([[SOS_token]], device=device)\n    decoder_hidden = encoder_hidden\n    \n    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False\n    \n    if use_teacher_forcing:\n        # Teacher forcing mode\n        for de_i in range(target_length):\n            decoder_output, decoder_hidden, decoder_attention = decoder(decoder_input, decoder_hidden, encoder_outputs)\n            loss += criterion(decoder_output, target_tensor[de_i])\n            decoder_input = target_tensor[de_i]\n            \n    else:\n        # free running mode\n        for de_i in range(target_length):\n            decoder_output, decoder_hidden, decoder_attention = decoder(decoder_input, decoder_hidden, encoder_outputs)\n            # sample the final timestep output as the current input (argmax function)\n            topvalue, topindex = decoder_output.data.topk(1)\n            # detach from history as input\n            decoder_input = topindex.squeeze().detach()\n            \n            loss += criterion(decoder_output, target_tensor[de_i])\n            if decoder_input.item() == EOS_token:  # item() : to get a Python number from a tensor containing a single value\n                break\n                \n    loss.backward()\n    \n    encoder_optimizer.step()\n    decoder_optimizer.step()\n    \n    return loss.item() / target_length","pos":73,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"955f86","input":"import time\nimport math\n\ndef asMinutes(s):\n    m = math.floor(s / 60)\n    s -= m * 60\n    return '%dm %ds' % (m, s)\n\ndef timeSince(since, percent):\n    now = time.time()\n    s = now - since\n    es = s / (percent)\n    rs = es - s\n    return '%s (- %s)' % (asMinutes(s), asMinutes(rs))","pos":75,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":25,"id":"f96821","input":"import matplotlib.pyplot as plt\nplt.switch_backend('agg')\n%matplotlib inline\nimport matplotlib.ticker as ticker\nimport numpy as np\n\ndef showPlot(points):\n    plt.figure()\n    fig, ax = plt.subplots()\n    loc = ticker.MultipleLocator(base=0.2)\n    ax.yaxis.set_major_locator(loc)\n    plt.plot(points)","pos":77,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"700184","input":"def trainIters(encoder, decoder, n_iters, print_every=1000, plot_every=100, learning_rate=0.01):\n    start = time.time()\n    plot_losses = []\n    print_loss_total, plot_loss_total = 0, 0\n\n    encoder_optimizer = optim.SGD(encoder.parameters(), lr=learning_rate)\n    decoder_optimizer = optim.SGD(decoder.parameters(), lr=learning_rate)\n    training_pairs = [tensorsFromPair(random.choice(pairs)) for i in range(n_iters)]\n    criterion = nn.NLLLoss()\n\n    for iter in range(1, n_iters + 1):\n        training_pair = training_pairs[iter - 1]\n        input_tensor = training_pair[0]\n        target_tensor = training_pair[1]\n\n        loss = train(input_tensor, target_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion)\n        print_loss_total += loss\n        plot_loss_total += loss\n\n        if iter % print_every == 0:\n            print_loss_avg = print_loss_total / print_every\n            print_loss_total = 0\n            print(\"Time: {} | ({} | {:.2f}%) avg: {:.4f}\".format(timeSince(start, iter / n_iters), iter, iter / n_iters * 100, print_loss_avg))\n\n        if iter % plot_every == 0:\n            plot_loss_avg = plot_loss_total / plot_every\n            plot_losses.append(plot_loss_avg)\n            plot_loss_total = 0\n\n    showPlot(plot_losses)","pos":78,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"c447c0","input":"input_lang.n_words","output":{"0":{"data":{"text/plain":"4489"},"exec_count":27,"output_type":"execute_result"}},"pos":80,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":28,"id":"ad7931","input":"# INPUT_DIM = len(SRC.vocab)\n# OUTPUT_DIM = len(TRG.vocab)\n\nINPUT_DIM = input_lang.n_words\nOUTPUT_DIM = output_lang.n_words\n\nENC_EMB_DIM = 256\nDEC_EMB_DIM = 256\nHID_DIM = 512\nN_LAYERS = 2\nENC_DROPOUT = 0.5\nDEC_DROPOUT = 0.5\n\nenc = Encoder(INPUT_DIM, ENC_EMB_DIM, HID_DIM, N_LAYERS, ENC_DROPOUT)\ndec = AttnDecoderRNN(OUTPUT_DIM, DEC_EMB_DIM, HID_DIM, N_LAYERS, DEC_DROPOUT)\n\n# model = Seq2Seq(enc, dec, device).to(device)","pos":81,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"82bc67","input":"class Seq2Seq(nn.Module):\n    def __init__(self, encoder, decoder, device):\n        super().__init__()\n        \n        self.encoder = encoder\n        self.decoder = decoder\n        self.device = device\n        \n        assert encoder.hid_dim == decoder.hid_dim, \\\n            \"Hidden dimensions of encoder and decoder must be equal!\"\n        assert encoder.n_layers == decoder.n_layers, \\\n            \"Encoder and decoder must have equal number of layers!\"\n        \n    def forward(self, src, trg, teacher_forcing_ratio = 0.5):\n        \n        #src = [src len, batch size]\n        #trg = [trg len, batch size]\n        #teacher_forcing_ratio is probability to use teacher forcing\n        #e.g. if teacher_forcing_ratio is 0.75 we use ground-truth inputs 75% of the time\n        \n        batch_size = trg.shape[1]\n        trg_len = trg.shape[0]\n        trg_vocab_size = self.decoder.output_dim\n        \n        #tensor to store decoder outputs\n        outputs = torch.zeros(trg_len, batch_size, trg_vocab_size).to(self.device)\n        \n        #last hidden state of the encoder is used as the initial hidden state of the decoder\n        hidden, cell = self.encoder(src)\n        \n        #first input to the decoder is the <sos> tokens\n        input = trg[0,:]\n        \n        for t in range(1, trg_len):\n            \n            #insert input token embedding, previous hidden and previous cell states\n            #receive output tensor (predictions) and new hidden and cell states\n            output, hidden, cell = self.decoder(input, hidden, cell)\n            \n            #place predictions in a tensor holding predictions for each token\n            outputs[t] = output\n            \n            #decide if we are going to use teacher forcing or not\n            teacher_force = random.random() < teacher_forcing_ratio\n            \n            #get the highest predicted token from our predictions\n            top1 = output.argmax(1) \n            \n            #if teacher forcing, use actual next token as next input\n            #if not, use predicted token\n            input = trg[t] if teacher_force else top1\n        \n        return outputs","pos":82,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"06c785","input":"# def epoch_time(start_time, end_time):\n#     elapsed_time = end_time - start_time\n#     elapsed_mins = int(elapsed_time / 60)\n#     elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n#     return elapsed_mins, elapsed_secs","pos":101,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":30,"id":"794040","input":"model = Seq2Seq(enc, dec, device).to(device)","pos":83,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":31,"id":"73696c","input":"def init_weights(m):\n    for name, param in m.named_parameters():\n        nn.init.uniform_(param.data, -0.08, 0.08)\n","pos":84,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"5be610","input":"model.apply(init_weights)","output":{"0":{"data":{"text/plain":"Seq2Seq(\n  (encoder): Encoder(\n    (embedding): Embedding(4489, 256)\n    (rnn): LSTM(256, 512, num_layers=2, dropout=0.5)\n    (dropout): Dropout(p=0.5, inplace=False)\n  )\n  (decoder): AttnDecoderRNN(\n    (embedding): Embedding(2925, 256)\n    (rnn): LSTM(256, 512, num_layers=2, dropout=0.5)\n    (fc_out): Linear(in_features=512, out_features=2925, bias=True)\n    (dropout): Dropout(p=0.5, inplace=False)\n  )\n)"},"exec_count":32,"output_type":"execute_result"}},"pos":85,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"e36b2b","input":"def count_parameters(model):\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n\nprint(f'The model has {count_parameters(model):,} trainable parameters')","output":{"0":{"name":"stdout","output_type":"stream","text":"The model has 10,754,925 trainable parameters\n"}},"pos":86,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":34,"id":"b177e1","input":"optimizer = optim.Adam(model.parameters())","pos":87,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":35,"id":"97a47f","input":"def evaluate(model, iterator, criterion):\n    \n    model.eval()\n    \n    epoch_loss = 0\n    \n    with torch.no_grad():\n    \n        for i, batch in enumerate(iterator):\n\n            src = batch.src\n            trg = batch.trg\n\n            output = model(src, trg, 0) #turn off teacher forcing\n\n            #trg = [trg len, batch size]\n            #output = [trg len, batch size, output dim]\n\n            output_dim = output.shape[-1]\n            \n            output = output[1:].view(-1, output_dim)\n            trg = trg[1:].view(-1)\n\n            #trg = [(trg len - 1) * batch size]\n            #output = [(trg len - 1) * batch size, output dim]\n\n            loss = criterion(output, trg)\n            \n            epoch_loss += loss.item()\n        \n    return epoch_loss / len(iterator)","pos":89,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"0a4a4d","input":"# N_EPOCHS = 10\n# CLIP = 1\n\n# best_valid_loss = float('inf')\n\n# for epoch in range(N_EPOCHS):\n    \n#     start_time = time.time()\n    \n#     train_loss = train(model, train_iterator, optimizer, criterion, CLIP)\n#     valid_loss = evaluate(model, valid_iterator, criterion)\n    \n#     end_time = time.time()\n    \n#     epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n    \n#     if valid_loss < best_valid_loss:\n#         best_valid_loss = valid_loss\n#         torch.save(model.state_dict(), 'tut1-model.pt')\n    \n#     print(f'Epoch: {epoch+1:02} | Time: {epoch_mins}m {epoch_secs}s')\n#     print(f'\\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):7.3f}')\n#     print(f'\\t Val. Loss: {valid_loss:.3f} |  Val. PPL: {math.exp(valid_loss):7.3f}')","pos":103,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"6a2faa","input":"def evaluateRandomly(encoder, decoder, n=10):\n    for i in range(n):\n        pair = random.choice(pairs)\n        print(\">\", pair[0])\n        print(\"=\", pair[1])\n        output_words, attentions = evaluate(enc, dec, pair[0])\n        output_sentence = ' '.join(output_words)\n        print(\"<\", output_sentence)\n        print('\\n')","pos":90,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":42,"id":"fca21c","input":"# evaluateRandomly(encoder, attn_decoder)\n\nevaluateRandomly(enc, dec)\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"> je commence a peine .\n= i m just beginning .\n"},"1":{"ename":"AttributeError","evalue":"'Encoder' object has no attribute 'initHidden'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-e2ce47fa2aff>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# evaluateRandomly(encoder, attn_decoder)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mevaluateRandomly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-41-a3b203f149b4>\u001b[0m in \u001b[0;36mevaluateRandomly\u001b[0;34m(encoder, decoder, n)\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\">\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpair\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"=\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpair\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0moutput_words\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattentions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdec\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpair\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m         \u001b[0moutput_sentence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m' '\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_words\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"<\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_sentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-35-42162dde905f>\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(encoder, decoder, sentence, max_length)\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0minput_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtensorFromSentence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_lang\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msentence\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0minput_length\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput_tensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m         \u001b[0mencoder_hidden\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minitHidden\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mencoder_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_length\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhidden_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/projects/34d0ed99-0189-4257-b043-76e3a84cda74/.local/lib/python3.6/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    946\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    947\u001b[0m         raise AttributeError(\"'{}' object has no attribute '{}'\".format(\n\u001b[0;32m--> 948\u001b[0;31m             type(self).__name__, name))\n\u001b[0m\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    950\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mUnion\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Module'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'Encoder' object has no attribute 'initHidden'"]}},"pos":91,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"7d42da","input":"def readLangs(lang1, lang2, reverse=False):\n    print(\"Reading lines...\")\n\n    lines = open('./data/{}-{}.txt'.format(lang1, lang2), encoding='utf-8').read().strip().split('\\n')\n    pairs = [[normalizeString(s) for s in l.split('\\t')] for l in lines]\n\n    if reverse:\n        pairs = [list(reversed(p)) for p in pairs]\n        input_lang = Lang(lang2)\n        output_lang = Lang(lang1)\n    else:\n        input_lang = Lang(lang1)\n        output_lang = Lang(lang2)\n\n    return input_lang, output_lang, pairs","pos":20,"state":"done","type":"cell"}
{"cell_type":"code","id":"2a6e54","input":"","pos":14,"state":"done","type":"cell"}
{"cell_type":"code","id":"2c0439","input":"from __future__ import unicode_literals, print_function, division\nfrom io import open\nimport unicodedata\nimport string\nimport re\nimport random\n\nimport torch\nimport torch.nn as nn\nfrom torch import optim\nimport torch.nn.functional as F\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","pos":7,"start":1627545273343,"state":"done","type":"cell"}
{"cell_type":"code","id":"6f5290","input":"SOS_token = 0\nEOS_token = 1\n\n\n\nclass Lang:\n    def __init__(self, name):\n        self.name = name\n        self.word2index = {}\n        self.word2count = {}\n        self.index2word = {0: \"SOS\", 1: \"EOS\"}\n        self.n_words = 2\n\n    def addSentence(self, sentence):\n        for word in sentence.split(' '):\n            self.addWord(word)\n\n    def addWord(self, word):\n        if word not in self.word2index:\n            self.word2index[word] = self.n_words\n            self.word2count[word] = 1\n            self.index2word[self.n_words] = word\n            self.n_words += 1\n        else:\n            self.word2count[word] += 1","pos":18,"start":1627545166685,"state":"done","type":"cell"}
{"cell_type":"code","id":"7b9596","input":"def unicodeToAscii(s):\n    return ''.join(\n        c for c in unicodedata.normalize('NFD', s)\n        if unicodedata.category(c) != 'Mn'\n    )","pos":11,"start":1627545164030,"state":"done","type":"cell"}
{"cell_type":"code","id":"b2db67","input":"def normalizeString(s):\n    s = unicodeToAscii(s.lower().strip())\n    s = re.sub(r\"([.!?])\", r\" \\1\", s)\n    s = re.sub(r\"[^a-zA-Z.!?]+\", r\" \", s)\n    return s","pos":13,"start":1627545165140,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"07db62","input":"The encoder of a seq2seq network is a RNN that outputs some value for every word from the input sentence. For every input word the encoder outputs a vector and a hidden state, and uses the hidden state for the next input word.","pos":41,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0d6413","input":"Please build the DecoderRNN without attention refer to the graph above & compare the difference before and after using attention","pos":50,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0f30f8","input":"The decoder is another RNN that takes the encoder output vector(s) and outputs a sequence of words to create the translation.","pos":46,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"14d3c7","input":"A useful property of the attention mechanism is its highly interpretable outputs. Because it is used to weight specific encoder outputs of the input sequence, we can imagine looking where the network is focused most at each time step.","pos":117,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"15e064","input":"Start evaluating...","pos":114,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"17f903","input":"### ======== END OF CHALLENGE THREE ========","pos":65,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"19b7df","input":"![](https://i.imgur.com/MIyh9pn.png)","pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1ba2b4","input":"### Encoder","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2659c4","input":"- Two recurrent neural networks work together to transform one sequence to another. An encoder network condenses an input sequence into a vector, and a decoder network unfolds that vector into a new sequence. To improve upon this model we’ll use an attention mechanism, which lets the decoder learn to focus over a specific range of the input sequence.","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"272796","input":"![](https://i.imgur.com/Xkrm9Km.png)","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"273c74","input":"Prepare the training data","pos":67,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2da243","input":"![](https://i.imgur.com/XITOJbn.png)","pos":48,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2df108","input":"## Seq2Seq Model","pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2f5848","input":"## Read dataset","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2feb94","input":"### Data Visualizing","pos":116,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"33a96e","input":"Seq2Seq Paper Link: https://arxiv.org/abs/1409.3215<br>\nAttention Mechanism Paper Link: https://arxiv.org/abs/1409.0473","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"393781","input":"### Decoder","pos":45,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3ac0b1","input":"- Download pre-trained word-embedding here: \n  - [FastText crawl 300d 2M](https://www.kaggle.com/yekenot/fasttext-crawl-300d-2m)\n  - [glove.840B.300d](https://nlp.stanford.edu/projects/glove/)\n  - [glove.twitter.27B](https://nlp.stanford.edu/projects/glove/)","pos":123,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3f6af1","input":"![](https://i.imgur.com/GVpPU5w.png)","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"48e638","input":"Try to use another attention function such as \"structure attention\" mentioned by https://arxiv.org/pdf/1409.0473.pdf","pos":60,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"53e949","input":"This is a helper function to print time elapsed and estimated time remaining given the current time and progress %.","pos":74,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"54a907","input":"![](https://i.imgur.com/karGLAW.png)\n![](https://i.imgur.com/N1HS8n7.png)\n![](https://i.imgur.com/bNdw4mD.png)","pos":62,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5bacfe","input":"To train we run the input sentence through the encoder, and keep track of every output and the latest hidden state. Then the decoder is given the <SOS> token as its first input, and the last hidden state of the encoder as its first hidden state.","pos":71,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5c7cd9","input":"To train, for each pair we will need an input tensor (indexes of the words in the input sentence) and target tensor (indexes of the words in the target sentence). While creating these vectors we will append the EOS token to both sequences.","pos":68,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5cb670","input":"Training steps including:\n   - Start a timer\n   - Initialize optimizers and criterion\n   - Create set of training pairs\n   - Start empty losses array for plotting","pos":76,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5ef91e","input":"### ======== CHALLENGE PART TWO ========","pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"633cf7","input":"Please design your own sampling rules & adjust the model parameters by training with these datasets","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6745b1","input":"### Attention Decoder","pos":54,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"68d296","input":"A Sequence to Sequence network, or seq2seq network, or Encoder Decoder network, is a model consisting of two RNNs called the encoder and decoder. The encoder reads an input sequence and outputs a single vector, and the decoder reads that vector to produce an output sequence.","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6f035c","input":"### Training","pos":66,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"78b4cc","input":"## Define the word & index transformer","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7daaf4","input":"![](https://i.imgur.com/n340MrD.png)","pos":42,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7ed66d","input":"**A Tip** : “Teacher forcing” is the concept of using the real target outputs as each next input, instead of using the decoder’s guess as the next input. Using teacher forcing causes it to converge faster but when the trained network is exploited, it may exhibit instability. ","pos":72,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8825aa","input":"We can evaluate random sentences from the training set and print out the input, target, and output to make some subjective quality judgements:","pos":112,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8ae89a","input":"## Data Clearning (Sample by eng_prefixes)","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9101d2","input":"## Load dataset","pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"920ff2","input":"The file is a tab separated list of translation pairs.<br>\nDownload the data from [here](https://download.pytorch.org/tutorial/data.zip) and extract it to the current directory.","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"943b52","input":"### ======== CHALLENGE PART THREE ========","pos":59,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"99a4d2","input":"The dot attention function extracts the **association features between feature vectors by matrix multiplication**, which is more like a machine learning method defined by artificial features. However, structure attention is like a deep learning method to some extent. It automatically learns how to obtain the relevant information between the feature matrices **through hyperparameters W,U and nonlinear equations tanh**. It has a certain improvement on the adaptability of the attention mechanism model.","pos":63,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9fee50","input":"### Evaluation","pos":109,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a84eda","input":"## Requirements","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a941e9","input":"Training the Model","pos":70,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"af1909","input":"we will be representing each word in a language as a one-hot vector, or giant vector of zeros except for a single one (at the index of the word). ","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b9cf29","input":"Lowercase, trim, and remove non-letter characters.","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bb305a","input":"Attention allows the decoder network to “focus” on a different part of the encoder’s outputs for every step of the decoder’s own outputs. First we calculate a set of attention weights. These will be multiplied by the encoder output vectors to create a weighted combination. The result should contain information about that specific part of the input sequence, and thus help the decoder choose the right output words.","pos":55,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c92327","input":"In the simplest seq2seq decoder we use only last output of the encoder. This last output is sometimes called the context vector as it encodes context from the entire sequence. This context vector is used as the initial hidden state of the decoder.","pos":47,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ce0ed2","input":"**Examples**: [KEY: > input, = target, < output]<br>\n\n> il est en train de peindre un tableau .<br>\n= he is painting a picture .<br>\n< he is painting a picture .<br>\n\n> pourquoi ne pas essayer ce vin delicieux ?<br>\n= why not try that delicious wine ?<br>\n< why not try that delicious wine ?<br>\n\n> elle n est pas poete mais romanciere .<br>\n= she is not a poet but a novelist .<br>\n< she not not a poet but a novelist .<br>\n\n> vous etes trop maigre .<br>\n= you re too skinny .<br>\n< you re all alone .<br>","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d7eb6e","input":"### ======== END OF CHALLENGE TWO ========","pos":53,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d99c84","input":"### ======== CHALLENGE PART ONE ========","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"db821c","input":"The files are all in Unicode, to simplify we will turn Unicode characters to ASCII.","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ddc093","input":"For a better viewing experience we will do the extra work of adding axes and labels:","pos":119,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e2ade6","input":"Start training...","pos":79,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e979a0","input":"Evaluation is mostly the same as training, but there are no targets so we simply feed the decoder’s predictions back to itself for each step. Every time it predicts a word we add it to the output string, and if it predicts the EOS token we stop there. We also store the decoder’s attention outputs for display later.","pos":110,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ebcc65","input":"## A neural network to translate from French to English","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ed8bbb","input":"# Seq2Seq with Attention Model (Pytorch Version)","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fc4be3","input":"### Using pre-train embedding","pos":122,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fd65b5","input":"![](https://i.imgur.com/QIliyjS.png)","pos":56,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ff4ccf","input":"### ======== END OF CHALLENGE ONE ========","pos":30,"state":"done","type":"cell"}
{"id":0,"time":1627545269876,"type":"user"}
{"last_load":1627545149493,"type":"file"}
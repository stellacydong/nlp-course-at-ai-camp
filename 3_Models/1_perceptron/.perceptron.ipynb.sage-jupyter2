{"backend_state":"init","kernel":"python3-ubuntu","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"32959b","input":"","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"44a405","input":"","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"46840b","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"65b308","input":"","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7f40d8","input":"","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b935cc","input":"","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"c824ae","input":"# import necessary packages\n\n# math \nimport numpy as np\n# plot \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n# tables \nimport pandas as pd","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"429704","input":"# apply predict function above to our dataset \n# print all answer, and you will see there are only 2 wrong predictions, which match our picture above\n\nfor i in range(len(df.x1)):\n    output = predict(df.x1[i], df.x2[i], weights)\n    if df.y[i] == output: \n        print('at point (%d, %d), actual = %d, predict = %d   -----------> y' %(df.x1[i], df.x2[i], df.y[i], output))\n    else: \n        print('at point (%d, %d), actual = %d, predict = %d   -----------> n' %(df.x1[i], df.x2[i], df.y[i], output))","output":{"0":{"name":"stdout","output_type":"stream","text":"at point (-1, 2), actual = 0, predict = 0   -----------> y\nat point (3, 3), actual = 0, predict = 1   -----------> n\nat point (1, 4), actual = 0, predict = 0   -----------> y\nat point (2, 7), actual = 0, predict = 0   -----------> y\nat point (5, 6), actual = 0, predict = 1   -----------> n\nat point (7, 2), actual = 1, predict = 1   -----------> y\nat point (9, 1), actual = 1, predict = 1   -----------> y\nat point (8, 5), actual = 1, predict = 1   -----------> y\nat point (9, 7), actual = 1, predict = 1   -----------> y\nat point (10, 3), actual = 1, predict = 1   -----------> y\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"5c47e8","input":"# define a function called update_weights()\n\n# error = (predicted value - actual value)\n# new_weights = old_weight + learning_rate * error * input \n# new_weights = old_weight + learning_rate * gradient  \n\n\ndef update_weights(weights, x1, x2, y, learning_rate):\n    w = np.zeros((len(y),3))\n    \n    for i in range(len(y)):\n        if i == 0:\n            w[i] = weights \n        else:\n            output = predict(x1[i], x2[i], w[i])   # predict values \n            error = output - y[i]  # erros \n            w[i][0] = w[i-1][0] + learning_rate*error # update weights \n            w[i][1] = w[i-1][1] + learning_rate*error*x1[i] # update weights \n            w[i][2] = w[i-1][2] + learning_rate*error*x2[i] # update weights       \n    return w\n","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"ca6997","input":"learning_rate = 0.2\n\n# you shall try different values for learning_rate \n# learning_rate = 20\n# learning_rate = 0.002\n\nw = update_weights(weights, df.x1, df.x2, df.y, learning_rate)","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"ca82bc","input":"# plot some iterations\n\ni = 0\nx = np.linspace(-2,12,100)\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\n# the green line \nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"fe23d978bf9a36991fd175902420fa685acecfb0","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":13,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"084e6f","input":"# plot some iterations\n\ni = 1\nx = np.linspace(-2,12,100)\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\n# the green line \nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"133ee020be4e8f724e1a5aa63135d441c84dadc2","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":14,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"f64b1b","input":"# plot some iterations\n\ni = 4\nx = np.linspace(-2,12,100)\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\n# the green line \nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"5ff6bf3b19afb727f59dad8b64c4022326f5f417","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":15,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"f7ddcf","input":"# plot some iterations\n\ni = 8\nx = np.linspace(-2,12,100)\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\n# the green line \nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"9bcd3641375709b2a8e901595a5e55691ff3cc68","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"7621ff","input":"# plot some iterations\n\ni = 9\nx = np.linspace(-2,12,100)\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\n# the green line \nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"b59236d289144816f3f4832bf5193606b3111144","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"de9349","input":"# load data from excel \ndf = pd.read_excel(r'perceptron_data.xlsx') ","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"b269aa","input":"# plot some iterations\n\ni = 10\nx = np.linspace(-2,12,100)\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\n# the green line \nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"ename":"IndexError","evalue":"index 10 is out of bounds for axis 0 with size 10","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-7785fbacba76>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlmplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x1\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"x2\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit_reg\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"o\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"s\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# the green line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"g\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\".\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 10 is out of bounds for axis 0 with size 10"]},"2":{"data":{"image/png":"746d3e1436530285e406a96136f16d7325aceb9e","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":21,"metadata":{"image/png":{"height":365,"width":411},"needs_background":"light"},"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"7dca01","input":"def train_weights(weights, x1, x2, y, learning_rate, iteration):\n    w = np.zeros((len(y)*iteration,3))\n    for j in range(iteration):\n        for i in range(len(y)):\n            if i == 0: \n                if (i+j*len(y)) == 0: \n                    w[i + j*len(y)] = weights \n                else:\n                    w[i + j*len(y)] = w[i+j*len(y)-1]\n            else:\n                output = predict(x1[i-1], x2[i-1], w[i+j*len(y)-1])\n                error = output - y[i-1]\n                w[i + j*len(y)][0] = w[i + j*len(y)-1][0] + learning_rate*error\n                w[i + j*len(y)][1] = w[i + j*len(y)-1][1] + learning_rate*error*x1[i-1]\n                w[i + j*len(y)][2] = w[i + j*len(y)-1][2] + learning_rate*error*x2[i-1]  \n    return w","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"25bdd8","input":"iteration = 2\nw = train_weights(weights, df.x1, df.x2, df.y, learning_rate, iteration)","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"6d10b3","input":"# plot some iterations\n\ni = 1\n\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\nx = np.linspace(-2,12,100)\nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()\n","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"133ee020be4e8f724e1a5aa63135d441c84dadc2","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":24,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"7aa901","input":"# plot some iterations\n\nx = np.linspace(-2,12,100)\n\ni = 2\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"acab473dee0e8265716160d78000ae108ea32b0b","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":25,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"a8f8cc","input":"# plot some iterations\n\nx = np.linspace(-2,12,100)\n\ni = 9\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,25])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"6caabfd723bf35f2399a8857174ed18f6794ba28","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":26,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"1a6dc8","input":"# plot some iterations\n\nx = np.linspace(-2,12,100)\n\ni = 11\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,26])\nplt.title('i = %d' %i)\nplt.show()\n","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"dbf43e6f32348e93ce52a72510d8e14212739afa","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":27,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"0cda60","input":"# plot some iterations\n\nx = np.linspace(-2,12,100)\n\ni = 15\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\nz = -(w[i][1]/w[i][2])*x + (w[i][0]/w[i][2] ) \nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.axis([-2,12,-10,24])\nplt.title('i = %d' %i)\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"06a4d803c81b2fc611eea57f1fa5f5d04f0fc935","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":28,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"6e9fca","input":"# you can check what the data looks like \ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x1</th>\n      <th>x2</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-1</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>7</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>6</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>7</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>9</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>5</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   x1  x2  y\n0  -1   2  0\n1   3   3  0\n2   1   4  0\n3   2   7  0\n4   5   6  0\n5   7   2  1\n6   9   1  1\n7   8   5  1\n8   9   7  1\n9  10   3  1"},"exec_count":4,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"370081","input":"df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10 entries, 0 to 9\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   x1      10 non-null     int64\n 1   x2      10 non-null     int64\n 2   y       10 non-null     int64\ndtypes: int64(3)\nmemory usage: 368.0 bytes\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"65ae22","input":"# plot the data \nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"text/plain":"<seaborn.axisgrid.FacetGrid at 0x7fb817238cd0>"},"exec_count":6,"output_type":"execute_result"},"2":{"data":{"image/png":"746d3e1436530285e406a96136f16d7325aceb9e","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":365,"width":411},"needs_background":"light"},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"01a780","input":"# define the intial weight weights = (threshold, w1, w2)\nweights = np.array([-1, -5.1, 3.1])\n\n# threshold = -1 \n# w1 = -5.1\n# w2 = 3.1\n\n\n## here is an example that you can think about it \n# midterm 40% weight w1\n# final 60% weight w2 \n# final_grade = 0.4*midterm + 0.6*final \n\n# threshold = 60 \n# if final_grade >= 60: \n    # print('you pass')\n    # y = 1\n# elif final_grade < 60: \n    # print('you fail')\n    # y = 0\n","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"c9c820","input":"# plot training data and the intial weight \n\n\nsns.lmplot(\"x1\", \"x2\", data=df, hue='y', fit_reg=False, markers=[\"o\", \"s\"])\n\nx = np.linspace(-2,12,100)\nz = -(weights[1]/weights[2])*x + (weights[0]/weights[2] ) # green line in the plot \n\n# print(weights[1])\n# print(weights[2])\n# print(weights[0])\n\nsns.regplot(x,z, color=\"g\", marker=\".\")\n\nplt.title('data and intial weight (i = 0)')\nplt.axis([-2,12,-10,25])\nplt.show()\n","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n/usr/local/lib/python3.8/dist-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n"},"1":{"data":{"image/png":"6b7e2928bc4c300d669d0cb2609b60a271b3b057","text/plain":"<Figure size 402.375x360 with 1 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":381,"width":426},"needs_background":"light"},"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"4f6547","input":"# define a function called predict()\n# the function return the output from the network \n\n# if w1*x1 + w2*x2 < bias, \n# return 1; \n# else \n# return 0 \n\n# weights[1]*x1 + weights[2]*x2 = dot product of (weights[1], weights[2]) dot (x1, x2)\n\ndef predict(x1,x2,weights): \n    if weights[1]*x1 + weights[2]*x2 < weights[0]:  # dot product \n        output = 1\n    else: \n        output = 0        \n    return output","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"0d181f","input":"##### train weights for the network (loop all your dataset)","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"1277d9","input":"##### predict the output from the network ","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"6af7c4","input":"##### update the weights based on the error term you computed above (backprop)","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"8d3cc3","input":"##### homework \n\nwrite a new program which will classify 3 kinds of data (-1, 0, 1)\n\na) you need to create your own date in excel. (x1, x2) as inputs, y will be the output, y = 0, 1, -1\n\nb) how many lines do you need?  \n\nc) how to define the rule which finds the predicted value from the network? w1 * x1 + w2 * x2 greater or less than the threshold?? \n\nd) how to update your weights (threshold, w1, w2)","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"9a9eb3","input":"## simple perceptron","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"a1222f","input":"##### guess initial weights and plot data (x1,x2,y) with initial weights","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"a6b7e8","input":"##### import data ","pos":1,"type":"cell"}
{"id":0,"time":1627541549233,"type":"user"}
{"last_load":1627541549520,"type":"file"}